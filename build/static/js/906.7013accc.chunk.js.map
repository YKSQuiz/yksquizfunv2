{"version":3,"file":"static/js/906.7013accc.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","components/features/admin/PerformanceDashboard.tsx"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\r\nimport { usePerformanceMonitor } from '../../../utils/performance';\r\nimport { getMemoryUsage, getNetworkInfo } from '../../../utils/performance';\r\nimport { useABTest } from '../../../utils/abTesting';\r\nimport { GradientBackground } from '../../common/ui';\r\nimport './PerformanceDashboard.css';\r\n\r\ninterface PerformanceData {\r\n  timestamp: number;\r\n  memoryUsage: number;\r\n  networkSpeed: number;\r\n  loadTime: number;\r\n  cacheHitRate: number;\r\n}\r\n\r\ninterface ChartConfig {\r\n  title: string;\r\n  dataKey: string;\r\n  stroke?: string;\r\n  fill?: string;\r\n  type: 'line' | 'bar';\r\n}\r\n\r\nconst PerformanceDashboard: React.FC = () => {\r\n  const { getMetrics, reportMetrics } = usePerformanceMonitor();\r\n  const [performanceData, setPerformanceData] = useState<PerformanceData[]>([]);\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  // AB Test results\r\n  const { variant: uiVariant, config: uiConfig } = useABTest('quiz_ui_variant');\r\n  const { variant: loadingVariant, config: loadingConfig } = useABTest('question_loading');\r\n\r\n  // Chart configurations\r\n  const chartConfigs: ChartConfig[] = useMemo(() => [\r\n    { title: 'Memory Usage Over Time', dataKey: 'memory', stroke: '#8884d8', type: 'line' },\r\n    { title: 'Load Time Over Time', dataKey: 'loadTime', stroke: '#82ca9d', type: 'line' },\r\n    { title: 'Cache Hit Rate', dataKey: 'cacheHitRate', fill: '#8884d8', type: 'bar' },\r\n    { title: 'Network Speed', dataKey: 'network', stroke: '#ffc658', type: 'line' }\r\n  ], []);\r\n\r\n  const toggleMonitoring = useCallback(() => {\r\n    if (isMonitoring) {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n        setRefreshInterval(null);\r\n      }\r\n      setIsMonitoring(false);\r\n    } else {\r\n      const interval = setInterval(() => {\r\n        collectPerformanceData();\r\n      }, 5000);\r\n      setRefreshInterval(interval);\r\n      setIsMonitoring(true);\r\n    }\r\n  }, [isMonitoring, refreshInterval]);\r\n\r\n  const collectPerformanceData = useCallback(() => {\r\n    const memory = getMemoryUsage();\r\n    const network = getNetworkInfo();\r\n    const metrics = getMetrics();\r\n\r\n    const data: PerformanceData = {\r\n      timestamp: Date.now(),\r\n      memoryUsage: memory ? (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 : 0,\r\n      networkSpeed: network ? network.downlink : 0,\r\n      loadTime: metrics['fetchQuestions'] ? metrics['fetchQuestions'].reduce((a, b) => a + b, 0) / metrics['fetchQuestions'].length : 0,\r\n      cacheHitRate: metrics['cache_hit'] ? (metrics['cache_hit'].length / (metrics['cache_hit'].length + (metrics['fetch_error']?.length || 0))) * 100 : 0\r\n    };\r\n\r\n    setPerformanceData(prev => [...prev.slice(-20), data]);\r\n  }, [getMetrics]);\r\n\r\n  const exportPerformanceData = useCallback(() => {\r\n    const dataStr = JSON.stringify(performanceData, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(dataBlob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = 'performance-data.json';\r\n    link.click();\r\n  }, [performanceData]);\r\n\r\n  // Memoized chart data\r\n  const chartData = useMemo(() => {\r\n    return performanceData.map(data => ({\r\n      time: new Date(data.timestamp).toLocaleTimeString(),\r\n      memory: data.memoryUsage,\r\n      network: data.networkSpeed,\r\n      loadTime: data.loadTime,\r\n      cacheHitRate: data.cacheHitRate\r\n    }));\r\n  }, [performanceData]);\r\n\r\n  // Performance summary\r\n  const performanceSummary = useMemo(() => {\r\n    if (performanceData.length === 0) return null;\r\n\r\n    const latest = performanceData[performanceData.length - 1];\r\n    const avgMemory = performanceData.reduce((sum, data) => sum + data.memoryUsage, 0) / performanceData.length;\r\n    const avgLoadTime = performanceData.reduce((sum, data) => sum + data.loadTime, 0) / performanceData.length;\r\n    const avgCacheHitRate = performanceData.reduce((sum, data) => sum + data.cacheHitRate, 0) / performanceData.length;\r\n\r\n    return {\r\n      currentMemory: latest?.memoryUsage || 0,\r\n      averageMemory: avgMemory,\r\n      currentLoadTime: latest?.loadTime || 0,\r\n      averageLoadTime: avgLoadTime,\r\n      currentCacheHitRate: latest?.cacheHitRate || 0,\r\n      averageCacheHitRate: avgCacheHitRate,\r\n      dataPoints: performanceData.length\r\n    };\r\n  }, [performanceData]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (refreshInterval) {\r\n        clearInterval(refreshInterval);\r\n      }\r\n    };\r\n  }, [refreshInterval]);\r\n\r\n  const renderChart = useCallback((config: ChartConfig) => {\r\n    const commonProps = {\r\n      data: chartData\r\n    };\r\n\r\n    const chartProps = {\r\n      ...commonProps,\r\n      children: (\r\n        <>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"time\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n        </>\r\n      )\r\n    };\r\n\r\n    return (\r\n      <div key={config.title} className=\"chart-container\">\r\n        <h3>{config.title}</h3>\r\n        <ResponsiveContainer width=\"100%\" height={300}>\r\n          {config.type === 'line' ? (\r\n            <LineChart {...chartProps}>\r\n              <Line type=\"monotone\" dataKey={config.dataKey} stroke={config.stroke} />\r\n            </LineChart>\r\n          ) : (\r\n            <BarChart {...chartProps}>\r\n              <Bar dataKey={config.dataKey} fill={config.fill} />\r\n            </BarChart>\r\n          )}\r\n        </ResponsiveContainer>\r\n      </div>\r\n    );\r\n  }, [chartData]);\r\n\r\n  return (\r\n    <GradientBackground variant=\"admin\" showParticles={true} particleCount={6}>\r\n      <div className=\"performance-dashboard\">\r\n        <div className=\"dashboard-header\">\r\n          <h1>Performance Dashboard</h1>\r\n          <button \r\n            onClick={toggleMonitoring}\r\n            className={`monitoring-btn ${isMonitoring ? 'active' : ''}`}\r\n          >\r\n            {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\r\n          </button>\r\n        </div>\r\n\r\n        {/* AB Test Information */}\r\n        <div className=\"ab-test-section\">\r\n          <h2>AB Test Status</h2>\r\n          <div className=\"ab-test-grid\">\r\n            <div className=\"ab-test-card\">\r\n              <h3>UI Variant</h3>\r\n              <p>Current: {uiVariant}</p>\r\n              <p>Progress Bar: {uiConfig.showProgressBar ? 'Yes' : 'No'}</p>\r\n              <p>Animation Speed: {uiConfig.animationSpeed}</p>\r\n            </div>\r\n            <div className=\"ab-test-card\">\r\n              <h3>Loading Variant</h3>\r\n              <p>Current: {loadingVariant}</p>\r\n              <p>Cache Size: {loadingConfig.cacheSize}</p>\r\n              <p>Strategy: {loadingConfig.loadingStrategy}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance Summary */}\r\n        {performanceSummary && (\r\n          <div className=\"performance-summary\">\r\n            <h2>Performance Summary</h2>\r\n            <div className=\"summary-grid\">\r\n              <div className=\"summary-card\">\r\n                <h3>Memory Usage</h3>\r\n                <p className=\"current\">{performanceSummary.currentMemory.toFixed(2)}%</p>\r\n                <p className=\"average\">Avg: {performanceSummary.averageMemory.toFixed(2)}%</p>\r\n              </div>\r\n              <div className=\"summary-card\">\r\n                <h3>Load Time</h3>\r\n                <p className=\"current\">{performanceSummary.currentLoadTime.toFixed(2)}ms</p>\r\n                <p className=\"average\">Avg: {performanceSummary.averageLoadTime.toFixed(2)}ms</p>\r\n              </div>\r\n              <div className=\"summary-card\">\r\n                <h3>Cache Hit Rate</h3>\r\n                <p className=\"current\">{performanceSummary.currentCacheHitRate.toFixed(2)}%</p>\r\n                <p className=\"average\">Avg: {performanceSummary.averageCacheHitRate.toFixed(2)}%</p>\r\n              </div>\r\n              <div className=\"summary-card\">\r\n                <h3>Data Points</h3>\r\n                <p className=\"current\">{performanceSummary.dataPoints}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Charts */}\r\n        {chartData.length > 0 && (\r\n          <div className=\"charts-section\">\r\n            <h2>Performance Charts</h2>\r\n            <div className=\"chart-grid\">\r\n              {chartConfigs.map(renderChart)}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Export Data */}\r\n        <div className=\"export-section\">\r\n          <h2>Export Data</h2>\r\n          <button onClick={reportMetrics}>\r\n            Export Metrics\r\n          </button>\r\n          <button onClick={exportPerformanceData}>\r\n            Export Performance Data\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </GradientBackground>\r\n  );\r\n};\r\n\r\nexport default PerformanceDashboard; "],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","PerformanceDashboard","getMetrics","reportMetrics","usePerformanceMonitor","performanceData","setPerformanceData","useState","isMonitoring","setIsMonitoring","refreshInterval","setRefreshInterval","variant","uiVariant","config","uiConfig","useABTest","loadingVariant","loadingConfig","chartConfigs","useMemo","title","dataKey","stroke","type","fill","toggleMonitoring","useCallback","clearInterval","interval","setInterval","collectPerformanceData","_metrics$fetch_error","memory","getMemoryUsage","network","getNetworkInfo","metrics","data","timestamp","Date","now","memoryUsage","usedJSHeapSize","jsHeapSizeLimit","networkSpeed","downlink","loadTime","reduce","a","b","length","cacheHitRate","prev","slice","exportPerformanceData","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","click","chartData","map","time","toLocaleTimeString","performanceSummary","latest","avgMemory","sum","avgLoadTime","avgCacheHitRate","currentMemory","averageMemory","currentLoadTime","averageLoadTime","currentCacheHitRate","averageCacheHitRate","dataPoints","useEffect","renderChart","chartProps","children","_jsxs","_Fragment","_jsx","CartesianGrid","strokeDasharray","Tooltip","className","ResponsiveContainer","width","height","LineChart","Line","GradientBackground","showParticles","particleCount","onClick","showProgressBar","animationSpeed","cacheSize","loadingStrategy","toFixed"],"sourceRoot":""}